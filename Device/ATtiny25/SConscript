################################################################################
# Filename:    SConscript                                                      #
# License:     Public Domain                                                   #
# Author:      New Rupture Systems                                             #
# Description: Build VUSB (USB <-> I2C) device program.                        #
################################################################################
Import("env")

# Adjust target to device
target = ("AVR", "None", "0")
env.Replace(TARGET_ARCH = target[0],
            TARGET_OS = target[1],
            TARGET_OS_VERSION = target[2],
            CPPDEFINES = [("PLATFORM_ARCH", "PLATFORM_{0}".
                           format(target[0]).upper()),
                          ("PLATFORM_OS", "PLATFORM_{0}".
                           format(target[1]).upper()),
                          ("PLATFORM_OS_VERSION", target[2])])

# Configure a suitable environment
if env["LIST_DEPENDS"]:
   listing = {}
   args = {"listing" : listing}
else:
   args = {}

conf = env.ConfigureEx(**args)
try:
   conf.FindComponent(name = "AVR GCC",
                      component = "AS",
                      check = lambda : conf.CheckComponentValue("AS", "gcc"))
   cc = conf.FindComponent(name = "AVR GCC",
                           component = "CC",
                           check = (conf.CheckCC,
                                    lambda : conf.CheckDeclaration("__GNUC__"),
                                    lambda : conf.CheckCHeader("avr/version.h",
                                                               "<>")))
   link = conf.FindComponent(name = "AVR C Linker",
                             component = "LINK",
                             check = lambda : conf.CheckLink("ELF"),
                             depends = cc)

   conf.FindProgram("avr-objcopy")
except Exception as e:
   error = str(e)
   Return("error")
else:
   if env["LIST_DEPENDS"]:
      status = (None, listing)
      Return("status")
finally:
   env = conf.Finish()


# Setup component flags
env.Replace(CFLAGS = ["-std=gnu99", "-Wall", "-Os", "-mmcu=attiny25"],
            ASFLAGS = ["-mmcu=attiny25", "-xassembler-with-cpp"])
env.Append(CPPDEFINES = [("DEBUG_LEVEL", "0"), ("F_CPU", "12000000")])

if env["DEBUG"]:
   env.Append(CFLAGS = ["-g"])
   env.Append(ASFLAGS = ["-Wa,-g"])

if env.subst("$LINK") == "gcc":
   env.Append(LINKFLAGS = ["-mmcu=attiny25"])


#Build program
main = env.Program("Main", env.Object("Main.c") +
                           env.Object("usbdrv.c") +
                           env.Object("usbdrvasm.S"))

#Make Intel Hex file
main_hex = env.Command("Main.hex", main,
                       Action("avr-objcopy -j .text -j .data -O ihex " +
                              "$SOURCE $TARGET",
                              cmdstr = "Making $TARGET"))
env.Clean(main, "Main.hex")
env.Alias("VUSB", main_hex)

env.Default(".")